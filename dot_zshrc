export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

#################################  HISTORY  #################################
# history
HISTFILE=$HOME/.zsh_history     # 履歴を保存するファイル
HISTSIZE=100000                 # メモリ上に保存する履歴のサイズ
SAVEHIST=1000000                # 上述のファイルに保存する履歴のサイズ

# share .zshhistory
setopt inc_append_history       # 実行時に履歴をファイルにに追加していく
setopt share_history            # 履歴を他のシェルとリアルタイム共有する

setopt hist_ignore_all_dups     # ヒストリーに重複を表示しない
setopt hist_save_no_dups        # 重複するコマンドが保存されるとき、古い方を削除する。
setopt extended_history         # コマンドのタイムスタンプをHISTFILEに記録する
setopt hist_expire_dups_first   # HISTFILEのサイズがHISTSIZEを超える場合は、最初に重複を削除します

# コマンドラインでも # 以降をコメントと見なす
setopt interactive_comments

# インストールしたコマンドを即座に反映
zstyle ":completion:*:commands" rehash 1

# ディレクトリ名だけでcdする
setopt auto_cd

# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time Oh My Zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(git aws aliases colorize copyfile copypath docker docker-compose python pip virtualenv node)

source $ZSH/oh-my-zsh.sh

eval "$(sheldon source)"

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='nano'
else
  export EDITOR='code'
fi

# Compilation flags
# export ARCHFLAGS="-arch x86_64"

# Set personal aliases, overriding those provided by Oh My Zsh libs,
# plugins, and themes. Aliases can be placed here, though Oh My Zsh
# users are encouraged to define aliases within a top-level file in
# the $ZSH_CUSTOM folder, with .zsh extension. Examples:
# - $ZSH_CUSTOM/aliases.zsh
# - $ZSH_CUSTOM/macos.zsh
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"

export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

# bun completions
[ -s "~/.bun/_bun" ] && source "~/.bun/_bun"

# bun
export BUN_INSTALL="$HOME/.bun"
export PATH="$BUN_INSTALL/bin:$PATH"

# oh-my-posh
if command -v oh-my-posh &> /dev/null; then
  eval "$(oh-my-posh init zsh --config '~/.oh-my-posh/themes/mytheme2.omp.json')"
fi

# Aliases
alias git-reset-all="git reset --hard && git clean -fd"

ABBR_SET_EXPANSION_CURSOR=1

alias ls='ls -F --color=auto'
abbr -S ll='ls -l' >> /dev/null
abbr -S la='ls -a' >> /dev/null
abbr -S lla='ls -la' >> /dev/null

abbr -S g=git >> /dev/null
abbr -S gi=git >> /dev/null
abbr -S gti=git >> /dev/null
abbr -S 'git st'='git status' >> /dev/null
abbr -S 'git sw'='git switch' >> /dev/null
abbr -S 'git co'='git checkout' >> /dev/null
abbr -S 'git ch'='git checkout' >> /dev/null
abbr -S 'git m'='git checkout main' >> /dev/null
abbr -S 'git br'='git branch' >> /dev/null
abbr -S 'git fe'='git fetch' >> /dev/null
abbr -S 'git pl'='git pull' >> /dev/null
abbr -S 'git pul'='git pull' >> /dev/null
abbr -S 'git ad'='git add' >> /dev/null
abbr -S 'git cm'='git commit -m "%"' >> /dev/null
abbr -S 'git cmm'='git commit -m "%"' >> /dev/null
abbr -S 'git cmt'='git commit -m "%"' >> /dev/null
abbr -S 'git mg'='git merge' >> /dev/null
abbr -S 'git mr'='git merge' >> /dev/null
abbr -S 'git ps'='git push' >> /dev/null
abbr -S 'git ph'='git push' >> /dev/null
abbr -S 'git psh'='git push' >> /dev/null

abbr -S zrc='. ~/.zshrc' >> /dev/null
abbr -S cz='chezmoi' >> /dev/null
abbr -S cza='chezmoi add' >> /dev/null
abbr -S sld='sheldon' >> /dev/null

abbr -S cpa='copypath' >> /dev/null
abbr -S cpf='copyfile' >> /dev/null

abbr -S vba='. .venv/bin/activate' >> /dev/null

# nix
if [ -e ~/.nix-profile/etc/profile.d/nix.sh ]; then . ~/.nix-profile/etc/profile.d/nix.sh; fi # added by Nix installer

# direnv
if command -v direnv &> /dev/null; then
  eval "$(direnv hook zsh)"
fi

# Rust
if [ -e "$HOME/.cargo/env" ]; then
  . "$HOME/.cargo/env"
fi

# fzf
if command -v fzf &> /dev/null; then
  source <(fzf --zsh)

  alias fzf='fzf --style full --bind 'focus:transform-header:file --brief {}''

  # cd
  fcd() {
    local dir
    dir=$(find ${1:-.} -path '*/\.*' -prune \
                    -o -type d -print 2> /dev/null | fzf +m) &&
    cd "$dir"
  }
  alias fd='fcd'

  fzz() {
    local res=$(z | sort -rn | cut -c 12- | fzf)
    if [ -n "$res" ]; then
        BUFFER+="cd $res"
        zle accept-line
    else
        return 1
    fi
  }
  alias fz='fzz'

  zle -N fzz
  bindkey '^f' fzz

  # git checkout
  fbr() {
    local branches branch
    branches=$(git branch -vv) &&
    branch=$(echo "$branches" | fzf +m) &&
    git checkout $(echo "$branch" | awk '{print $1}' | sed "s/.* //")
  }
  alias fch='fbr'

  # git checkout (including remote brandh)
  fbrm() {
    local branches branch
    branches=$(git branch --all | grep -v HEAD) &&
    branch=$(echo "$branches" |
            fzf-tmux -d $(( 2 + $(wc -l <<< "$branches") )) +m) &&
    git checkout $(echo "$branch" | sed "s/.* //" | sed "s#remotes/[^/]*/##")
  }

  fadd() {
    local out q n addfiles
    while out=$(
        git status --short |
        awk '{if (substr($0,2,1) !~ / /) print $2}' |
        fzf-tmux --multi --exit-0 --expect=ctrl-d); do
      q=$(head -1 <<< "$out")
      n=$[$(wc -l <<< "$out") - 1]
      addfiles=(`echo $(tail "-$n" <<< "$out")`)
      [[ -z "$addfiles" ]] && continue
      if [ "$q" = ctrl-d ]; then
        git diff --color=always $addfiles | less -R
      else
        git add $addfiles
      fi
    done
  }
  alias fad='fadd'

  # git commit browser
  fshow() {
    git log --graph --color=always \
        --format="%C(auto)%h%d %s %C(black)%C(bold)%cr" "$@" |
    fzf --ansi --no-sort --reverse --tiebreak=index --bind=ctrl-s:toggle-sort \
        --bind "ctrl-m:execute:
                  (grep -o '[a-f0-9]\{7\}' | head -1 |
                  xargs -I % sh -c 'git show --color=always % | less -R') << 'FZF-EOF'
                  {}
  FZF-EOF"
  }

  function cdworktree() {
    # カレントディレクトリがGitリポジトリ上かどうか
    git rev-parse &>/dev/null
    if [ $? -ne 0 ]; then
        echo fatal: Not a git repository.
        return
    fi

    local selectedWorkTreeDir=`git worktree list | fzf | awk '{print $1}'`

    if [ "$selectedWorkTreeDir" = "" ]; then
        # Ctrl-C.
        return
    fi

    cd ${selectedWorkTreeDir}
  }
fi
